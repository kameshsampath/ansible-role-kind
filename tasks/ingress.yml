---
- name: Get Contour Manifest
  get_url:
    dest: /tmp/contour.yml 
    url: "{{ingress_manifest}}"
  delegate_to: localhost

- name: Update Contour namespace
  replace:
      path: /tmp/contour.yml 
      regexp: '^(\s*)(name[space]*)?(:\s*)(projectcontour)\s*$'
      replace: '\1\2\3{{ingress_namespace}}'
      backup: yes
  delegate_to: localhost
  register: updated_manifest
  when: ingress_namespace != 'projectcontour'
  changed_when: False

- name: Deploy Contour
  community.kubernetes.k8s:
    definition: "{{ item.manifest | from_yaml_all | list }}"
    state: present
  register: contour_deploy
  loop:
    - name: contour.yml
      manifest: "{{ lookup('file','/tmp/contour.yml')}}"
  loop_control:
      label: "{{item.name}}"
  changed_when: False

- name: 'Wait for Daemonset envoy to be ready'
  k8s_info:
    kind: DaemonSet
    name: envoy
    namespace: '{{ingress_namespace}}'
  register: ds_result
  until: ds_result.resources[0].status.numberReady == 1 and (ds_result.resources[0].status.numberAvailable == ds_result.resources[0].status.numberReady)
  retries: 18
  delay: 10

- name: "Wait for Contour"
  include_tasks: utils/k8s_deployment_status.yml
  vars:
    deployment_name: contour
    deployment_namespace: "{{ingress_namespace}}"

- name: Revert Contour namespace update
  copy:
    dest: /tmp/contour.yml 
    src: "{{ updated_manifest.backup_file }}"
  delegate_to: localhost
  when: updated_manifest is defined and updated_manifest.backup_file is defined
  changed_when: False
   